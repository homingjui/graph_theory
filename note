f :  { 1,2, …,p} ───> { 1,2, …,p} 是一個 轉換 （permutation ）
例f(1)=2 , f(2)=3, f(3)=4, …,f(p)=1
  g(1)=3, g(3)=5, g(5)=1, g(2)=2, g(4)=4, g(6)=6, g(7)=7, .… , g(p)=p


假設 graph 有 p 個 頂點， 用 1,2, …, p 命名，
graph 的邊就是用 （a, b）,1 <= a < b <= p , （ <=  指 小於 或 等於）表示
（a, b）和 （b, a）指同一個邊
對一個轉換  f :  { 1,2, …,p} ───> { 1,2, …,p}
將（a, b）對應到 （f(a), f(b)）, 這就得到邊之間的轉換。

邊的 排序 （採 字典序 ）
   任 取 二 邊 （a, b）, （c, d）, a<b, c<d ,
   我們 說 （a, b）< （c, d）, if  a<c,  or,  a=c and b<d

第一、看  a b 的差，差較小者為
第二， 差相同者，看 a b之和  a+b ,  和小的視為較小。


 例G={(1,2) (1,3) (1,4)} 而 f(1)=3, f(2)=2, f(3)=4, f(4)=1

  則 f 將 G 對到 f(G) = { (3,2) (3,4) (3,1) } ,

  原來 在  G 中 , (12）排 第一, 對到 (f(1) f(2)) = (3 2).排在第二 ,

           (13）原來排 第二, 對到 (f(1) f(3)) = (3 4).排在第三 ,

   f 的對應 產生的秩序上的變化 將給予 一個 符號 1, 或 －1

   為了方便寫入程式, 將一個邊 （a,b）對 一個 整數

      X(a,b) = 100 x a + b , 如果 a < b ,

      X(a,b) = 100 x b + a , 如果 a > b ,

 (  例  X(1,2)= X(2,1)=102 , X(8,7)=708,  X(5,10)=510  )


如果 (a, b) (c, d) 是不同的兩個邊

 Y ( (a, b), (c, d) )  ＝

     X( f(a), f(b) ) － X( f(c), f(d) )
   ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿

 X(a, b) － X(c, d)

對一個 graph G={ 某些邊 （a, b） （c, d）等 }
以及一個頂點 {1,2,…,p} 的 轉換 f ,
我們 考慮所有 G 之中（a, b）,（c, d）, 適合 X(a,b) 小於X(c, d),
得到 之  Y ( (a, b), (c, d) ) 全部相乘, 稱之為 Z(G,f) . (  注意：如 G 有 s個邊 , 則 這樣的 Y(…) 有 s(s-1)/2 個 ),

即   Z(G,f)  ＝ Product of {  Y ( (a, b), (c, d) ) ,
									  X(a,b) 小於X(c, d),
									（a, b）,（c, d） in G  }

令Sign(G,f) = 1, 如果Z(G,f)是正值;  Sign(G,f) = -1, 如果Z(G,f)是負值 .


則  G’= f(G) = Sign(G,f) G,   (  注意  f(G)={ (f(a), f(b)),  (a, b) in G }  )

重要:  如果 Z(G,f) = -1,  極可能 f(G) = G 導至 G = 0 .

f(G) = { (3,2) (3,4) (3,1) }

你會不會覺得 X(a, b) 的定義有點不自然，我在考慮 X(a，b) 這個函數作一下變動，其他不變; 最後結局不會變，
中間會有所更動，只是在過程，無所謂的。

X(a，b)=
|a一b|x100 + a 十b  ,

其中 |a一b|   指  a一b的絕對值，如果電腦不喜歡  絕對值，可改為

   (a一b)的平方  ，

完全不影響。

以上，其實就是要改變 邊(a，b) 之間的大小，不採用字典排序，而改為

第一、看  a b 的差，差較小者為小

第二， 差相同者，看 a b之和  a+b ,  和小的視為較小。


若  X(a，b)  改為

(a一b)^2 x100 + a +b

效果完全一樣。


100  的一地位 是什麼？  因為我以為，我須要計算的 graph，其頂點的個數，不會超過50，也超不過 100  。

# G = nx.Graph()
# G.add_node(1)
# G.add_nodes_from([2, 3])
# G.add_nodes_from([
#     (4, {"color": "B"}),
#     (5, {"color": "green"}),
# ])
# H = nx.path_graph(5)
# G.add_nodes_from(H)
# G.add_edge(1, 2)
# # e = (2, 3)
# # G.add_edge(*e)
# G.add_edges_from([(1, 3), (1, 4)])
# G.add_edges_from(H.edges)
# # G.clear()
# # G.add_edges_from([(1, 2), (1, 3)])
# # G.add_node(1)
# # G.add_edge(1, 2)
# # G.add_node("spam")        # adds node "spam"
# # G.add_nodes_from("spam")  # adds 4 nodes: 's', 'p', 'a', 'm'
# # G.add_edge(3, 'm')
# print(G.number_of_nodes())
# print(G.number_of_edges())
# # list(G.nodes)
# # list(G.edges)
# # list(G.adj[1])  # or list(G.neighbors(1))
# # G.degree[1]  # the number of edges incident to 1
# # G.edges([2, 'm'])
# # G.degree([2, 3])
# nx.draw(G, with_labels=True, font_weight='bold')
# plt.show()
